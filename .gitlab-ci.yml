include:
  - template: Workflows/MergeRequest-Pipelines.gitlab-ci.yml

stages:
  - lint
  - build
  - test
  - acceptance-test
  - release
  - publish

variables:
  # TODO(@timofurrer): verify if there is an option to read this version from either .go-version or go.mod
  GO_VERSION: '1.19'
  # NOTE(@timofurrer): used for caching, see `cache.paths` settings
  GOPATH: ${CI_PROJECT_DIR}/.go

default:
  image: golang:${GO_VERSION}
  tags:
    - saas-linux-medium-amd64

cache:
  key:
    files:
      - go.sum
      - GNUMakefile
  paths:
    - .go/pkg/mod

code_navigation:
  needs: []
  stage: release
  image: sourcegraph/lsif-go:v1
  allow_failure: true # recommended
  script:
    - lsif-go
  artifacts:
    reports:
      lsif: dump.lsif
  rules:
    - if: $CI_DEFAULT_BRANCH == $CI_COMMIT_REF_NAME

make:lint:
  needs: []
  stage: lint
  script:
    - make ${TARGET}
  parallel:
    matrix:
      - TARGET: [lint-golangci, lint-examples-tf, lint-examples-sh, lint-generated, lint-custom]

go:build:
  needs: []
  stage: build
  script:
    - make build

go:test:
  needs: []
  stage: test
  script:
    - make test

.testacc:
  needs: []
  stage: acceptance-test
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_HOST: tcp://docker:2376/
    DOCKER_TLS_VERIFY: 1
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
    GITLAB_BASE_URL: http://docker:8080/api/v4
  before_script:
    # FIXME(@timofurrer): refactor into prepared image for pipeline
    - |
      apt update
      apt install --yes --no-install-recommends ca-certificates curl gnupg lsb-release
      mkdir -p /etc/apt/keyrings
      curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
        $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
      apt update
      apt install --yes --no-install-recommends docker-ce docker-ce-cli containerd.io docker-compose-plugin
      echo 'docker compose "$@"' > /bin/docker-compose
      chmod +x /bin/docker-compose
    - docker info
    # FIXME(@timofurrer): refactor into prepared image for pipeline
    #                     see https://www.terraform.io/plugin/sdkv2/testing/acceptance-tests#requirements-and-recommendations and
    #                     https://github.com/hashicorp/terraform-plugin-sdk/issues/629 why we install terraform
    - |
      wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor > /usr/share/keyrings/hashicorp-archive-keyring.gpg
      echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list
      apt update
      apt install terraform
    - terraform version
    - test -f "${GITLAB_LICENSE}" && cp "${GITLAB_LICENSE}" "${CI_PROJECT_DIR}/Gitlab-license.txt"
    - make testacc-up SERVICE=gitlab-${GITLAB_EDITION} GITLAB_$(echo "${GITLAB_EDITION}" | tr '[:lower:]' '[:upper:]')_VERSION=${GITLAB_VERSION}
  script:
    - make testacc
  parallel:
    matrix:
      - GITLAB_VERSION: ["15.1.6-${GITLAB_EDITION}.0", "15.2.4-${GITLAB_EDITION}.0", "15.3.3-${GITLAB_EDITION}.0"]

testacc:ce:
  extends: .testacc
  variables:
    GITLAB_EDITION: ce

testacc:ee:
  extends: .testacc
  variables:
    GITLAB_EDITION: ee
  rules:
    - if: $ENABLE_EE_ACCEPTANCE_TESTS == "true"

goreleaser:
  stage: release
  only:
    - tags
  image:
    name: goreleaser/goreleaser:v1.12.1
    entrypoint: ['']
  variables:
    # Disable shallow cloning so that goreleaser can diff between tags to
    # generate a changelog.
    GIT_DEPTH: 0
    GITLAB_TOKEN: $CI_JOB_TOKEN
  before_script:
    - apk add gpg-agent
    - gpg --batch --no-tty --import $GPG_PRIVATE_KEY
    - "export GPG_FINGERPRINT=$(gpg --with-colons --list-keys | awk -F: '/^pub/ { print $5 }')"
  script:
    - goreleaser release
    # NOTE(@timofurrer): goreleaser doesn't write `release.extra_files` to the `dist/` folder
    #                    before upload, therefore, we are going to create it for now.
    #                    Note that it also strips the first character (the leading `v`) from the tag
    - cp terraform-registry-manifest.json dist/${CI_PROJECT_NAME}_${CI_COMMIT_TAG:1}_manifest.json
  artifacts:
    paths:
      - dist/$CI_PROJECT_NAME_*.zip
      - dist/$CI_PROJECT_NAME_*_SHA256SUMS*
      - dist/$CI_PROJECT_NAME_*_manifest.json
      - docs/

github-for-terraform-registry:
  stage: publish
  only:
    - tags
  image: alpine:3.16
  variables:
    GIT_STRATEGY: none
    GITHUB_ORG: gitlabhq
    GITHUB_REPO: $CI_PROJECT_NAME
  before_script:
    - apk add --update curl jq file git
    - ls dist/
  script:
    # NOTE(@timofurrer): publish docs to GitHub, so that they end up in the GitHub release Source code assets,
    #                    ready for the Terraform Registry to discover.
    - |
      git clone --depth 1 https://gitlab-terraform-provider-bot:$GITHUB_TOKEN_FOR_SYNC@github.com/$GITHUB_ORG/$GITHUB_REPO.git /tmp/github-repo
      cp -rf docs /tmp/github-repo
      cd /tmp/github-repo
      git config user.email "Terraform-Provider-Bot@gitlab.com"
      git config user.name "gitlab-terraform-provider-bot"
      git add docs
      git commit --message "Update docs for $CI_COMMIT_TAG release" --allow-empty
      git push
      cd -
      rm -rf /tmp/github-repo
    # create a release on GitHub
    # see https://docs.github.com/en/rest/releases/releases#create-a-release
    - |
      gh_release=$(curl --silent --show-error --fail-with-body -X POST -H "Accept: application/vnd.github.v3+json" -H "Authorization: token $GITHUB_TOKEN_FOR_SYNC" \
        https://api.github.com/repos/$GITHUB_ORG/$GITHUB_REPO/releases \
        -d '{
          "tag_name":"'$CI_COMMIT_TAG'",
          "target_commitish":"main",
          "name":"'$CI_COMMIT_TAG'",
          "body":"This release hosted on GitHub only exists because it is the only way to publish to the Terraform Provider Registry.\n\nSee the official release page on GitLab here: **'$CI_PROJECT_URL'/-/releases/'$CI_COMMIT_TAG'**",
          "draft":false,
          "prerelease":false,
          "generate_release_notes":false
        }'
      )
    # NOTE(tuxtimo): cannot use `.upload_url` from `$gh_release`, because it contains the query parameters in some weird unusable way ...
    - gh_release_upload_url="https://uploads.github.com/repos/$GITHUB_ORG/$GITHUB_REPO/releases/$(echo $gh_release | jq -r '.id')/assets"
    - 'echo "GitHub Release URL: $gh_release_upload_url"'
    # uploading release assets for GitHub release created in previous step
    # see https://docs.github.com/en/rest/releases/assets#upload-a-release-asset
    - |
      echo "Uploading assets from dist/ produced by goreleaser"
      for asset in dist/*; do
        echo -n "Uploading $asset ..."
        content_type=$(file -b --mime-type "$asset")
        filename=$(basename "$asset")
        curl --silent --output /dev/null --show-error --fail-with-body -X POST -H "Accept: application/vnd.github.v3+json" -H "Authorization: token $GITHUB_TOKEN_FOR_SYNC" \
          "$gh_release_upload_url?name=$filename" \
          -H "Content-Type: $content_type" \
          --data-binary "@$asset"
        echo " done."
      done
